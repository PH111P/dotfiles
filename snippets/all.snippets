global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet beg "begin{} / end{}" bA
\begin{$1}
    $0
\end{$1}
endsnippet

snippet \// "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)\\/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)\\/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "tilde" "tilde" riA
\tilde{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "mcal" "mathcal" riA
\mathcal{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])mcal" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

snippet "\.\.\." "dots" riA
\dots
endsnippet

snippet "π" "pi" riA
\pi
endsnippet

snippet "Π" "Pi" riA
\Pi
endsnippet

snippet "α" "alpha" riA
\alpha
endsnippet

snippet "β" "beta" riA
\beta
endsnippet

snippet "γ" "gamma" riA
\gamma
endsnippet

snippet "Γ" "Gamma" riA
\Gamma
endsnippet

snippet "φ" "phi" riA
\varphi
endsnippet

snippet "Σ" "Sigma" riA
\sum
endsnippet

snippet "Θ" "Theta" riA
\Theta
endsnippet

snippet "ω" "omega" riA
\omega
endsnippet

snippet "Ω" "Omega" riA
\Omega
endsnippet

snippet "τ" "tau" riA
\tau
endsnippet

snippet "δ" "delta" riA
\delta
endsnippet

snippet "Δ" "Delta" riA
\Delta
endsnippet

snippet "∇" "Sankaku" riA
\nabla
endsnippet

snippet "ε" "epsilon" riA
\varepsilon
endsnippet

snippet "⇐" "larr" riA
\Longleftarrow
endsnippet

snippet "⇔" "lrarr" riA
\Longleftrightarrow
endsnippet

snippet "⇒" "rarrow" riA
\Longrightarrow
endsnippet

snippet "∘" "circ" riA
\circ
endsnippet

snippet "∈" "in" riA
\in
endsnippet

snippet "•" "cdot" riA
\cdot
endsnippet

snippet "∀" "forall" riA
\forall
endsnippet

snippet "∃" "exists" riA
\exists
endsnippet

snippet "∩" "cap" riA
\cap
endsnippet

snippet "∪" "cup" riA
\cup
endsnippet

snippet "⊂" "subset" riA
\subset
endsnippet

snippet "ℕ" "nats" riA
\mathbb{N}
endsnippet

snippet "ℤ" "ints" riA
\mathbb{Z}
endsnippet

snippet "ℚ" "rats" riA
\mathbb{Q}
endsnippet

snippet "ℂ" "comps" riA
\mathbb{C}
endsnippet

snippet "—" "em" riA
---
endsnippet

snippet "×" "times" riA
\times
endsnippet

snippet "“" "``" riA
\`\`
endsnippet

snippet "”" "''" riA
''
endsnippet

snippet "„" ",," riA
,,
endsnippet
